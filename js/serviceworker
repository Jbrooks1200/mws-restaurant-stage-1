const cacheName = 'v1';
const cacheFiles = [
    '/',
    '/img/1.jpg',
    '/img/2.jpg',
    '/img/3.jpg',
    '/img/4.jpg',
    '/img/5.jpg',
    '/img/6.jpg',
    '/img/7.jpg',
    '/img/8.jpg',
    '/img/9.jpg',
    '/img/10.jpg',
    '/index.html',
    '/js/dbhelper.js',
    '/js/main.js',
    '/restaurant.html',
    '/css/styles.css',
    'https://unpkg.com/leaflet@1.3.1/dist/leaflet.js',
    'https://unpkg.com/leaflet@1.3.1/dist/leaflet.css',
    '/js/restaurant_info.js',
    '/data/restaurants.json',
];

self.addEventListener('install', function(e) {
    console.log("[Service Worker] Installed")

    e.waitUntil(caches.open(cacheName).then(function(cache) {
        console.log("[Service Worker] Caching cache files");
        return cache.addAll(cacheFiles);
        })
    );       
});

self.addEventListener("activate", function(e) {
    console.log("[Service Worker] Activated")

    e.waitUntil(caches.keys().then(function(cacheNames) {
        return Promise.all(cacheNames.map(function(thisCacheName) {
            if (thisCacheName !== cacheNames) {
                //console.log("[Serivce Worker] Removing Cached files from", thiscacheName)
                return caches.delete(thisCacheName);
            }
        }))
    })
    )
})

self.addEventListener('fetch', function(e) {
    console.log("[Service Worker] Fetching", e.request.url)

    e.respondWith(caches.match(e.request).then(function(response) {

        if (response) {
            return response;
        }

        let requestClone = e.request.clone();

        fetch(requestClone)
            .then(function(response) {
                if (!response) {
                    console.log("[Service Worker] No response from fetch");
                }

                const responseClone = response.clone();
                caches.open(cacheName).then(function(cache) {
                    cache.put(e.request, responseClone);
                    return response;
                });
            })
            .catch(function(errors) {
                console.log("[Service Worker] Error Fetching & Caching");
            });
                    
        })
    );
});
